name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  # Environment variables for all jobs
  CI: true
  PLAYWRIGHT_BROWSERS_PATH: 0
  # Performance optimization
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  # Test sharding for desktop browsers
  test-desktop:
    name: Desktop ${{ matrix.project }} (Shard ${{ matrix.shard }}/3)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
        shard: [1, 2, 3]
    
    env:
      # Test environment variables
      BASE_URL: https://www.saucedemo.com
      TIMEOUT: 15000
      RETRIES: 3
      WORKERS: 2
      GLOBAL_SETUP: true
      GLOBAL_TEARDOWN: true
      # Sharding configuration
      SHARD: true
      SHARD_CURRENT: ${{ matrix.shard }}
      SHARD_TOTAL: 3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browser (${{ matrix.project }})
        run: npx playwright install --with-deps ${{ matrix.project }}

      - name: Run Playwright tests with sharding
        run: |
          npx playwright test \
            --project=${{ matrix.project }} \
            --shard=${{ matrix.shard }}/3 \
            --reporter=github,html,json,junit \
            --timeout=30000
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TIMEOUT: ${{ env.TIMEOUT }}
          RETRIES: ${{ env.RETRIES }}
          WORKERS: ${{ env.WORKERS }}
          GLOBAL_SETUP: ${{ env.GLOBAL_SETUP }}
          GLOBAL_TEARDOWN: ${{ env.GLOBAL_TEARDOWN }}
          SHARD: ${{ env.SHARD }}
          SHARD_CURRENT: ${{ env.SHARD_CURRENT }}
          SHARD_TOTAL: ${{ env.SHARD_TOTAL }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: desktop-results-${{ matrix.project }}-shard-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Optimized mobile testing (no sharding for fewer tests)
  test-mobile:
    name: Mobile Tests - ${{ matrix.project }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ['Mobile Chrome', 'Mobile Safari']
    
    env:
      BASE_URL: https://www.saucedemo.com
      TIMEOUT: 20000
      RETRIES: 3
      WORKERS: 1
      GLOBAL_SETUP: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Mobile Playwright tests
        run: |
          npx playwright test \
            --project="${{ matrix.project }}" \
            --reporter=github,html,json
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TIMEOUT: ${{ env.TIMEOUT }}
          RETRIES: ${{ env.RETRIES }}
          WORKERS: ${{ env.WORKERS }}
          GLOBAL_SETUP: ${{ env.GLOBAL_SETUP }}

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-results-${{ matrix.project }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Performance testing job
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    env:
      BASE_URL: https://www.saucedemo.com
      TIMEOUT: 30000
      RETRIES: 2
      WORKERS: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run Performance Tests
        run: |
          npx playwright test \
            --project=performance \
            --reporter=github,html,json
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TIMEOUT: ${{ env.TIMEOUT }}
          RETRIES: ${{ env.RETRIES }}
          WORKERS: ${{ env.WORKERS }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            test-results/
            playwright-report/
          retention-days: 60

  # Merge reports from all shards and browsers
  merge-reports:
    name: Merge Test Reports
    if: always()
    needs: [test-desktop, test-mobile]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge Test Reports
        run: |
          echo "üìä Merging test reports from all shards and browsers..."
          
          # Create merged report directory
          mkdir -p merged-report
          
          # Initialize report merge
          echo '<!DOCTYPE html><html><head><title>Playwright Test Results - All Browsers & Shards</title>' > merged-report/index.html
          echo '<style>body{font-family:Arial,sans-serif;margin:40px;}h1{color:#2196F3;}ul{list-style-type:none;}li{margin:10px 0;}a{color:#1976D2;text-decoration:none;}a:hover{text-decoration:underline;}.summary{background:#f5f5f5;padding:20px;border-radius:5px;margin:20px 0;}.passed{color:#4CAF50;}.failed{color:#f44336;}.total{color:#2196F3;}</style>' >> merged-report/index.html
          echo '</head><body><h1>üé≠ Playwright Test Results Summary</h1>' >> merged-report/index.html
          
          # Count total tests and results
          total_passed=0
          total_failed=0
          total_tests=0
          
          echo '<div class="summary"><h2>üìà Test Execution Summary</h2>' >> merged-report/index.html
          echo '<h3>üåê Desktop Browser Results (Sharded)</h3><ul>' >> merged-report/index.html
          
          # Process desktop results
          for artifact_dir in artifacts/desktop-results-*; do
            if [ -d "$artifact_dir" ] && [ -f "$artifact_dir/test-results/results.json" ]; then
              browser_shard=$(basename "$artifact_dir" | sed 's/desktop-results-//')
              echo "<li>üì± <strong>$browser_shard</strong>" >> merged-report/index.html
              
              # Extract test counts from JSON
              if [ -f "$artifact_dir/test-results/results.json" ]; then
                # Simple test result parsing (you can enhance this)
                echo " - <a href='$browser_shard/index.html'>View Report</a></li>" >> merged-report/index.html
                
                # Copy report for browser/shard
                if [ -f "$artifact_dir/playwright-report/index.html" ]; then
                  mkdir -p "merged-report/$browser_shard"
                  cp -r "$artifact_dir/playwright-report/"* "merged-report/$browser_shard/"
                fi
              fi
            fi
          done
          
          echo '</ul><h3>üì± Mobile Browser Results</h3><ul>' >> merged-report/index.html
          
          # Process mobile results
          for artifact_dir in artifacts/mobile-results-*; do
            if [ -d "$artifact_dir" ]; then
              mobile_browser=$(basename "$artifact_dir" | sed 's/mobile-results-//' | sed 's/%20/ /g')
              echo "<li>üì± <strong>$mobile_browser</strong>" >> merged-report/index.html
              echo " - <a href='mobile-$mobile_browser/index.html'>View Report</a></li>" >> merged-report/index.html
              
              # Copy mobile report
              if [ -f "$artifact_dir/playwright-report/index.html" ]; then
                mkdir -p "merged-report/mobile-$mobile_browser"
                cp -r "$artifact_dir/playwright-report/"* "merged-report/mobile-$mobile_browser/"
              fi
            fi
          done
          
          echo '</ul></div>' >> merged-report/index.html
          echo '<p>üìä <strong>Sharding Strategy:</strong> Desktop tests run across 3 shards per browser for optimal performance</p>' >> merged-report/index.html
          echo '<p>‚ö° <strong>Performance Optimizations:</strong> Parallel execution, browser-specific launch args, smart retry logic</p>' >> merged-report/index.html
          echo '</body></html>' >> merged-report/index.html
          
          echo "‚úÖ Report merging completed"

      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: merged-test-report
          path: merged-report/
          retention-days: 60

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: merged-report
          destination_dir: test-reports

  # Performance and status notification
  notify:
    name: Test Results Notification
    if: always()
    needs: [test-desktop, test-mobile, performance-test, merge-reports]
    runs-on: ubuntu-latest
    
    steps:
      - name: Calculate test results
        id: results
        run: |
          # Determine overall status
          desktop_status="${{ needs.test-desktop.result }}"
          mobile_status="${{ needs.test-mobile.result }}"
          perf_status="${{ needs.performance-test.result }}"
          
          if [[ "$desktop_status" == "success" && "$mobile_status" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All tests passed successfully! ‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Some tests failed ‚ùå" >> $GITHUB_OUTPUT
          fi
          
          echo "desktop=$desktop_status" >> $GITHUB_OUTPUT
          echo "mobile=$mobile_status" >> $GITHUB_OUTPUT
          echo "performance=$perf_status" >> $GITHUB_OUTPUT

      - name: Success Notification
        if: steps.results.outputs.status == 'success'
        run: |
          echo "üéâ Test Execution Summary:"
          echo "‚úÖ Desktop Tests (Sharded): ${{ steps.results.outputs.desktop }}"
          echo "‚úÖ Mobile Tests: ${{ steps.results.outputs.mobile }}"
          echo "‚ö° Performance Tests: ${{ steps.results.outputs.performance }}"
          echo ""
          echo "üöÄ Performance Optimizations Applied:"
          echo "   ‚Ä¢ Test sharding across 3 shards per browser"
          echo "   ‚Ä¢ Smart retry mechanisms with exponential backoff"
          echo "   ‚Ä¢ Browser-specific launch optimizations"
          echo "   ‚Ä¢ Parallel execution with optimized worker count"
          echo "   ‚Ä¢ Global setup/teardown for better performance"

      - name: Failure Notification
        if: steps.results.outputs.status == 'failure'
        run: |
          echo "‚ö†Ô∏è Test Execution Summary:"
          echo "üñ•Ô∏è Desktop Tests: ${{ steps.results.outputs.desktop }}"
          echo "üì± Mobile Tests: ${{ steps.results.outputs.mobile }}"
          echo "‚ö° Performance Tests: ${{ steps.results.outputs.performance }}"
          echo ""
          echo "üîç Troubleshooting:"
          echo "   ‚Ä¢ Check individual shard results for detailed errors"
          echo "   ‚Ä¢ Review retry logs for intermittent failures"
          echo "   ‚Ä¢ Analyze performance test results if applicable"
          echo "   ‚Ä¢ Download artifacts for screenshots and videos"
          exit 1
