name: Playwright Tests

permissions:
  contents: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'

env:
  CI: true
  PLAYWRIGHT_BROWSERS_PATH: 0
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  # Test sharding for desktop browsers
  test-desktop:
    name: Desktop ${{ matrix.project }} (Shard ${{ matrix.shard }}/2)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
        shard: [1, 2]
    
    env:
      BASE_URL: https://www.saucedemo.com
      TIMEOUT: 30000
      RETRIES: 2
      WORKERS: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browser (${{ matrix.project }})
        run: npx playwright install --with-deps ${{ matrix.project }}

      - name: Run Playwright tests with sharding
        run: |
          npx playwright test \
            --project=${{ matrix.project }} \
            --shard=${{ matrix.shard }}/2 \
            --reporter=github,html,json,junit \
            --timeout=30000
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TIMEOUT: ${{ env.TIMEOUT }}
          RETRIES: ${{ env.RETRIES }}
          WORKERS: ${{ env.WORKERS }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: desktop-results-${{ matrix.project }}-shard-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Optimized mobile testing (no sharding for fewer tests)
  test-mobile:
    name: Mobile Tests - ${{ matrix.project }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ['Mobile Chrome', 'Mobile Safari']
    
    env:
      BASE_URL: https://www.saucedemo.com
      TIMEOUT: 20000
      RETRIES: 3
      WORKERS: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Mobile Playwright tests
        run: |
          npx playwright test \
            --project="${{ matrix.project }}" \
            --reporter=github,html,json
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TIMEOUT: ${{ env.TIMEOUT }}
          RETRIES: ${{ env.RETRIES }}
          WORKERS: ${{ env.WORKERS }}

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-results-${{ matrix.project }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Performance testing job
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    env:
      BASE_URL: https://www.saucedemo.com
      TIMEOUT: 30000
      RETRIES: 2
      WORKERS: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run Performance Tests
        run: |
          npx playwright test \
            --project=performance \
            --reporter=github,html,json
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TIMEOUT: ${{ env.TIMEOUT }}
          RETRIES: ${{ env.RETRIES }}
          WORKERS: ${{ env.WORKERS }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            test-results/
            playwright-report/
          retention-days: 60

  # Performance and status notification
  notify:
    name: Test Results Notification
    if: always()
    needs: [test-desktop, test-mobile, performance-test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Calculate test results
        id: results
        run: |
          # Determine overall status
          desktop_status="${{ needs.test-desktop.result }}"
          mobile_status="${{ needs.test-mobile.result }}"
          perf_status="${{ needs.performance-test.result }}"
          
          if [[ "$desktop_status" == "success" && "$mobile_status" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All tests passed successfully! ‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Some tests failed ‚ùå" >> $GITHUB_OUTPUT
          fi
          
          echo "desktop=$desktop_status" >> $GITHUB_OUTPUT
          echo "mobile=$mobile_status" >> $GITHUB_OUTPUT
          echo "performance=$perf_status" >> $GITHUB_OUTPUT

      - name: Success Notification
        if: steps.results.outputs.status == 'success'
        run: |
          echo "üéâ Test Execution Summary:"
          echo "‚úÖ Desktop Tests (Sharded): ${{ steps.results.outputs.desktop }}"
          echo "‚úÖ Mobile Tests: ${{ steps.results.outputs.mobile }}"
          echo "‚ö° Performance Tests: ${{ steps.results.outputs.performance }}"
          echo ""
          echo "üöÄ Performance Optimizations Applied:"
          echo "   ‚Ä¢ Test sharding across 2 shards per browser"
          echo "   ‚Ä¢ Smart retry mechanisms with exponential backoff"
          echo "   ‚Ä¢ Browser-specific launch optimizations"
          echo "   ‚Ä¢ Parallel execution with optimized worker count"
          echo "   ‚Ä¢ Global setup/teardown for better performance"

      - name: Failure Notification
        if: steps.results.outputs.status == 'failure'
        run: |
          echo "‚ö†Ô∏è Test Execution Summary:"
          echo "üñ•Ô∏è Desktop Tests: ${{ steps.results.outputs.desktop }}"
          echo "üì± Mobile Tests: ${{ steps.results.outputs.mobile }}"
          echo "‚ö° Performance Tests: ${{ steps.results.outputs.performance }}"
          echo ""
          echo "üîç Troubleshooting:"
          echo "   ‚Ä¢ Check individual shard results for detailed errors"
          echo "   ‚Ä¢ Review retry logs for intermittent failures"
          echo "   ‚Ä¢ Analyze performance test results if applicable"
          echo "   ‚Ä¢ Download artifacts for screenshots and videos"
          exit 1